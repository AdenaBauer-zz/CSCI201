import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;

public class directoryReport {
	int numFiles = 0;
	ArrayList<File> files;
	String smallestF;
	String largestF;
	
	void fileSizes(){
		largestF = files.get(0).getName();
		smallestF = files.get(0).getName();
		
		for(int i = 0; i < numFiles; i++){
			if(files.get(i).length() > largestF.length()){
				largestF = files.get(i).getName();
			}
			if(files.get(i).length() < smallestF.length()){
				smallestF = files.get(i).getName();
			}
		}
				
	}
	
	public void makeReport(){
		
		System.out.print("\nDIRECTORY REPORT: \n------------\n");
		System.out.print("Number of Files: "+numFiles + "\n"); //number of files
		System.out.print("Largest File: " + largestF + "\n"); //largest file
		System.out.print("Largest File: " + smallestF + "\n"); //smallest file

		
	}	
	
	public void readDirectory(){
		
		InputStreamReader isr = new InputStreamReader(System.in);
		boolean fileDoesntWork = true;
		
		while(fileDoesntWork){
			
			System.out.print("Please enter a directory name or path: ");
			
			try{
				BufferedReader br = new BufferedReader(isr);
				String dir_path = br.readLine();
				
				if(new String(dir_path).equals("exit")){
					return;
				}
												
				File f = new File(dir_path);
				files = new ArrayList<File>(Arrays.asList(f.listFiles()));
				int count = files.size();
				for(int i = 0; i < count; i++){
					if(!files.get(i).isDirectory()){
						numFiles++;
					}
				}
				
				fileDoesntWork = false; 
				makeReport();
			} 
			catch (FileNotFoundException fnfe) {
				System.out.println("File doesn't exist. \n");
				continue;
			} 
			catch (IOException ioe) {
				System.out.println("File contents are not readable.");
				continue;
			}
		}
		
	}
		
		
}
