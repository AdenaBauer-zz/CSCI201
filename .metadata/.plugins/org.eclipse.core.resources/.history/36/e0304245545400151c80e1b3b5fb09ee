
import java.awt.List;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;


public class fileReport {
	
	String[][] fileSentences = new String[2][1000];
	int lines[] = {0,0}; 
	int numFreq[] = {1,1};
	int numFreqWord[] = {1,1};
	File files[] = new File[2];
	int currMax[] = new int[2];
	int currMin[] = new int[2];
	int longestSent[] = new int[2];
	int shortestSent[]= new int[2];
	String[][] fileWords = new String[2][10000];
	Map<String, Integer> sentenceCount = new HashMap<String, Integer>();
	Map<String, Integer> wordFreq = new HashMap<String, Integer>();
	Map<String,Integer>[] wordFreqs= new Map[2];
	Map<String,Integer>[] sentenceCounts= new Map[2];

	int numFiles;
	
	public double fileSize(File f){
		return f.length();
	}
	
	public int characterCount(int n){
		int charCount = 0;
		for(int i = 0; i < lines[n]; i++){
			for(int j = 0; j < fileSentences[n][i].length(); j++){
				if(Character.isLetterOrDigit(fileSentences[n][i].charAt(j))){
					charCount++; 
				}
			}	
		}
		return charCount;
	}
	
	public char mostFreqChar(int n){
		
		char freqChar = fileSentences[n][0].charAt(0);
		Map<Character, Integer> charIntMap = new HashMap<Character, Integer>();
		
		for(int i= 0; i < lines[n]; i ++){
			for(int j = 0; j < fileSentences[n][i].length(); j++){
				char x = fileSentences[n][i].charAt(j);
				if(Character.isLetterOrDigit(x)){
					if(charIntMap.containsKey(x)){
						Integer val = charIntMap.get(x) + 1;
						charIntMap.put(x, val);

						if (val > numFreq[n]){
							freqChar = x;
							numFreq[n] = val;
						}
					}
					else{
						charIntMap.put(x, 1);

					}
				}
			}
		}

		return freqChar;
	}
	
	public int wordCount(int n){
		int wordCount = 0;
		
		for(int i = 0; i < lines[n]; i++){
			String words = fileSentences[n][i];
			StringTokenizer st = new StringTokenizer(words);
			wordCount = wordCount + st.countTokens();
			
			while (st.hasMoreTokens()) {
				String t = st.nextToken();
				if(t.length() > 1){
					char last = t.charAt(t.length()-1);
					
					while(!Character.isLetterOrDigit(last) && t.length() > 1 ){
						  t = t.substring(0, t.length()-1);
						  last = t.charAt(t.length()-1);
					}	
				}
		        if(!wordFreq.isEmpty() && wordFreq.containsKey(t)){
		        	 Integer val = wordFreq.get(t) + 1;
		        	 wordFreq.put(t, val);
		        }
		        else{
		        	 wordFreq.put(t, 1);
		        }
		     }
		}
		wordFreqs[n] = wordFreq;
		
		return wordCount;
	}
	
	public String mostFreqWord(int n){
		String s = fileSentences[n][0];
		
		String arr[] = s.split(" ", 2);
		
		String mostUsedWord = arr[0];
		
		for (Map.Entry<String, Integer> entry : wordFreqs[n].entrySet()) {
		    String key = entry.getKey();
		    Integer value = entry.getValue();
		    
		    if(value > numFreqWord[n]){
		    	numFreqWord[n] = value;
		    	mostUsedWord = key;
		    }
		}
		
		return mostUsedWord;
	}
	
	public int avgWordLength(int n){
		int pos = 0; 
		for (Map.Entry<String, Integer> entry : wordFreqs[n].entrySet()) {
		    String key = entry.getKey();
		    Integer value = entry.getValue();
		    
		    for(int j = 0; j < value; j++){
		    	fileWords[n][j+pos] = key;
		    }
		    pos = pos + value;
		}
		
		int avg = 0;
		int totalLen = 0;
		for(int i = 0; i < wordCount(n); i++){
			totalLen = totalLen + fileWords[n][i].length();
		}
		avg = totalLen/wordCount(n);
		
		return avg;
	}
	
	public String longestWord(int n){
		currMax[n] = fileWords[n][0].length();
		String longestWordStr = fileWords[n][0];
		for(int i = 0; i < wordCount(n); i++){
			if (fileWords[n][i].length() > currMax[n]){
				longestWordStr = fileWords[n][i];
				currMax[n] = fileWords[n][i].length();
			}
		}
		
		return longestWordStr;
	}
	public String shortestWord(int n){
		currMin[n] = fileWords[n][0].length();
		String shortestWordStr = fileWords[n][0];
		for(int i = 0; i < wordCount(n); i++){
			if (fileWords[n][i].length() < currMin[n]){ 
				shortestWordStr = fileWords[n][i];
				currMin[n] = fileWords[n][i].length();
			}
		}
		
		
		return shortestWordStr;
	}
	
	public int sentenceNum(int n){
		String longSent = fileSentences[n][0];
		
		for(int i = 1; i < lines[n]; i++){
			longSent = longSent + fileSentences[n][i];
		}
		String delims = "[.?!]+";
		String[] tokens = longSent.split(delims);
		
		for(int i = 0; i < tokens.length; i++){
			int val = tokens[i].length();
			sentenceCount.put(tokens[i],val);
		}
		
		sentenceCounts[n] = sentenceCount;
		return tokens.length; 
	}
	
	public int avgSentLength(int n){
		int sentenceLength = 0; 
		int counter = 0;
		
		for (Map.Entry<String, Integer> entry : sentenceCounts[n].entrySet()) {
		    String key = entry.getKey();
		    Integer value = entry.getValue();
		    	
		   sentenceLength = sentenceLength + value; 
		   counter++;
		}
		sentenceLength = sentenceLength/counter; 
		
		return sentenceLength; 
	}
	
	public String longestSent(int n){
		String longest = fileSentences[n][0];
		longestSent[n] = 0; 
		
		for (Map.Entry<String, Integer> entry : sentenceCounts[n].entrySet()) {
		    String key = entry.getKey();
		    Integer value = entry.getValue();
		    	
		   if(value > longestSent[n]){
			   longestSent[n] = value;
			   longest = key;
		   }
		}
		
		return longest; 
	}
	public String shortestSent(int n){
		String shortest = fileSentences[n][0];
		shortestSent[n] = longestSent[n]; 
			
		for (Map.Entry<String, Integer> entry : sentenceCounts[n].entrySet()) {
		    String key = entry.getKey();
			Integer value = entry.getValue();
	 	
		   if(value < shortestSent[n]){
			   shortestSent[n] = value;
			   shortest = key;
		   }
		}
			
		
		return shortest; 
	}
	
	public String linesInBoth(){
		String sharedLines = null;
		
		String sent1 = null;
		String sent2 = null;
		
		for(int i = 0; i < sentenceNum(0); i++){
			sent1 = fileSentences[0][i];
			
			for(int j = 0; j < sentenceNum(1); i++){
				sent2 = fileSentences[1][j];
				
				if(sent1 == sent2){
					sharedLines = sharedLines + " || " + sent1;
				}
				
			}
		}
		
		return sharedLines;
	}
	
	public void makeReport(File f){
		//THIS IS ONLY FOR ONE FILE REPORT
		
		System.out.print("\nFILE REPORT: \n------------\n");
		System.out.print("File Size: "+fileSize(f)+ " Bytes." + "\n"); //size of file
		System.out.print("Character Count:" + characterCount(0) + " Characters"+"\n"); //character count	
		System.out.print("Most Frequent Character: " + mostFreqChar(0)+ " ("+numFreq[0]+" occurances)\n"); //most frequent character
		System.out.print("Total Word Count: " + wordCount(0)+ " Words\n"); //total word count
		System.out.print("Most Frequent Word: " + mostFreqWord(0)+ " ("+numFreqWord[0]+" occurances)\n"); //most frequent word
		System.out.print("Average Word Length: " + avgWordLength(0)+" Characters\n"); //average word length
		System.out.print("Longest Word: " + longestWord(0)+ " ("+currMax[0]+" Characters)\n"); //longest word
		System.out.print("Shortest Word: " + shortestWord(0)+ " ("+currMin[0]+" Characters)\n"); //shortest word
		System.out.print("Number of Sentences: " + sentenceNum(0)+ "\n"); //number of sentences
		System.out.print("Avg Sent Length: " + avgSentLength(0)+ " (Includes Whitespace & Punct)\n"); //avg sentences length
		System.out.print("Longest Sentence: " + longestSent(0)+ "\n"); //longest sentence
		System.out.print("Shortest Sentence: " + shortestSent(0)+ "\n"); //shortest sentence	
		
	}
	public void compareFiles(){
		//run functions.
		
		for(int i = 0; i < numFiles + 1; i++){
			fileSize(files[i]);
			characterCount(i);
			mostFreqChar(i);
			wordCount(i);
			mostFreqWord(i);
			avgWordLength(i);
			longestWord(i);
			shortestWord(i);
			sentenceNum(i);
			avgSentLength(i);
			longestSent(i);
			shortestSent(i);	
		}
		
		System.out.print("\nFILE COMPARISON REPORT: \n------------\n");
		System.out.print("Lines Shared Between Files: "+linesInBoth() + "\n"); //lines contained in both files
		
		
	}
	
	public void readFile(int n) throws IOException{
		
		numFiles = n;
		InputStreamReader isr = new InputStreamReader(System.in);
		
		boolean fileDoesntWork = true;
			
		for(int i = 0; i < numFiles + 1; i++){
			while(fileDoesntWork){
				if(numFiles == 0){
					System.out.print("Please enter a file name or path: ");
				}
				if(numFiles == 1){
					System.out.print("Please enter the file name or path for file " + i + 1 + ": ");
				}
			
				try {
					BufferedReader br = new BufferedReader(isr);
					String file_path = br.readLine();
					
					if(new String(file_path).equals("exit")){
						return;
					}
													
					files[i]= new File(file_path);
					FileReader fr = new FileReader(files[i].getAbsolutePath());
					BufferedReader br2 = new BufferedReader(fr);
					boolean endOfFile = false;
					
					int counter = 0; 
					while(endOfFile == false){
						String line = br2.readLine();
						fileSentences[i][counter] = line;
						if (line == null){
							endOfFile = true;
							lines[i] = counter;
							break;
						}
						counter++;
					}		
					
					fileDoesntWork = false;
					if(numFiles == 0){
						makeReport(files[i]);

					}
					if(numFiles == 1){
						compareFiles();
					}
				} 
				catch (FileNotFoundException fnfe) {
					System.out.println("File doesn't exist. \n");
					continue;
				} 
				catch (IOException ioe) {
					System.out.println("File contents are not readable.");
					continue;
				}
			}
			
		}
		
		
		return;	
	}
}