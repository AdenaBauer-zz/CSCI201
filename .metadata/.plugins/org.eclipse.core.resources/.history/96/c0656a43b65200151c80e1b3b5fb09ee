
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.File;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;


public class fileReport {
	
	String[] fileSentences = new String[1000];
	int lines = 0; 
	int numFreq = 1;
	int numFreqWord = 1;
	int currMax;
	int currMin;
	String[] fileWords = new String[10000];
	Map<String, Integer> sentenceCount = new HashMap<String, Integer>();
	Map<String, Integer> wordFreq = new HashMap<String, Integer>();
	
	public double fileSize(File f){
		return f.length();
	}
	
	public int characterCount(){
		int charCount = 0;
		for(int i = 0; i < lines; i++){
			for(int j = 0; j < fileSentences[i].length(); j++){
				if(Character.isLetterOrDigit(fileSentences[i].charAt(j))){
					charCount++; 
				}
			}	
		}
		return charCount;
	}
	
	public char mostFreqChar(){
		
		char freqChar = fileSentences[0].charAt(0);
		Map<Character, Integer> charIntMap = new HashMap<Character, Integer>();
		
		for(int i= 0; i < lines; i ++){
			for(int j = 0; j < fileSentences[i].length(); j++){
				char x = fileSentences[i].charAt(j);
				if(Character.isLetterOrDigit(x)){
					if(charIntMap.containsKey(x)){
						Integer val = charIntMap.get(x) + 1;
						charIntMap.put(x, val);

						if (val > numFreq){
							freqChar = x;
							numFreq = val;
						}
					}
					else{
						charIntMap.put(x, 1);

					}
				}
			}
		}

		return freqChar;
	}
	
	public int wordCount(){
		int wordCount = 0;
		
		for(int i = 0; i < lines; i++){
			String words = fileSentences[i];
			StringTokenizer st = new StringTokenizer(words);
			wordCount = wordCount + st.countTokens();
			
			while (st.hasMoreTokens()) {
				String t = st.nextToken();
				if(t.length() > 1){
					char last = t.charAt(t.length()-1);
					
					while(!Character.isLetterOrDigit(last) && t.length() > 1 ){
						  t = t.substring(0, t.length()-1);
						  last = t.charAt(t.length()-1);
					}	
				}
		        if(wordFreq.containsKey(t)){
		        	 Integer val = wordFreq.get(t) + 1;
		        	 wordFreq.put(t, val);
		        }
		        else{
		        	 wordFreq.put(t, 1);
		        }
		     }
		}
		
		return wordCount;
	}
	
	public String mostFreqWord(){
		String s = fileSentences[0];
		
		String arr[] = s.split(" ", 2);
		
		String mostUsedWord = arr[0];
		
		for (Map.Entry<String, Integer> entry : wordFreq.entrySet()) {
		    String key = entry.getKey();
		    Integer value = entry.getValue();
		    
		    if(value > numFreqWord){
		    	numFreqWord = value;
		    	mostUsedWord = key;
		    }
		}
		
		return mostUsedWord;
	}
	
	public int avgWordLength(){
		int pos = 0; 
		for (Map.Entry<String, Integer> entry : wordFreq.entrySet()) {
		    String key = entry.getKey();
		    Integer value = entry.getValue();
		    
		    for(int j = 0; j < value; j++){
		    	fileWords[j+pos] = key;
		    }
		    pos = pos + value;
		}
		
		int avg = 0;
		int totalLen = 0;
		for(int i = 0; i < wordCount(); i++){
			totalLen = totalLen + fileWords[i].length();
		}
		avg = totalLen/wordCount();
		
		return avg;
	}
	
	public String longestWord(){
		currMax = fileWords[0].length();
		String longestWordStr = fileWords[0];
		for(int i = 0; i < wordCount(); i++){
			if (fileWords[i].length() > currMax){
				longestWordStr = fileWords[i];
				currMax = fileWords[i].length();
			}
		}
		
		return longestWordStr;
	}
	public String shortestWord(){
		currMin = fileWords[0].length();
		String shortestWordStr = fileWords[0];
		for(int i = 0; i < wordCount(); i++){
			if (fileWords[i].length() < currMin){ 
				shortestWordStr = fileWords[i];
				currMin = fileWords[i].length();
			}
		}
		
		
		return shortestWordStr;
	}
	
	public int sentenceNum(){
		String longSent = fileSentences[0];
		
		for(int i = 1; i < lines; i++){
			longSent = longSent + fileSentences[i];
		}
		String delims = "[.?!]+";
		String[] tokens = longSent.split(delims);
		
		for(int i = 0; i < tokens.length; i++){
			int val = tokens[i].length();
			sentenceCount.put(tokens[i],val);
		}
		return tokens.length; 
	}
	
	public int avgSentLength(){
		int sentenceLength = 0; 
		int counter = 0;
		
		for (Map.Entry<String, Integer> entry : sentenceCount.entrySet()) {
		    String key = entry.getKey();
		    Integer value = entry.getValue();
		    	
		   sentenceLength = sentenceLength + value; 
		   counter++;
		}
		sentenceLength = sentenceLength/counter; 
		
		return sentenceLength; 
	}
	
	public void makeReport(File f){
		System.out.print("\nFILE REPORT: \n------------\n");
		System.out.print("File Size: "+fileSize(f)+ " Bytes." + "\n"); //size of file
		System.out.print("Character Count:" + characterCount() + " Characters"+"\n"); //character count	
		System.out.print("Most Frequent Character: " + mostFreqChar()+ " ("+numFreq+" occurances)\n"); //most frequent character
		System.out.print("Total Word Count: " + wordCount()+ " Words\n"); //total word count
		System.out.print("Most Frequent Word: " + mostFreqWord()+ " ("+numFreqWord+" occurances)\n"); //most frequent word
		System.out.print("Average Word Length: " + avgWordLength()+" Characters\n"); //average word length
		System.out.print("Longest Word: " + longestWord()+ " ("+currMax+" Characters)\n"); //longest word
		System.out.print("Shortest Word: " + shortestWord()+ " ("+currMin+" Characters)\n"); //shortest word
		System.out.print("Number of Sentences: " + sentenceNum()+ "\n"); //number of sentences
		System.out.print("Avg Sentence Length: " + avgSentLength()+ " (Includes Whitespace & Punct)\n"); //avg sentences length
		
	}
	public void readFile() throws IOException{
				
		InputStreamReader isr = new InputStreamReader(System.in);
		
		boolean fileDoesntWork = true;
		
		while(fileDoesntWork){
			
			System.out.print("Please enter a file name or path: ");
		
			try {
				BufferedReader br = new BufferedReader(isr);
				String file_path = br.readLine();
				
				if(new String(file_path).equals("exit")){
					return;
				}
												
				File f = new File(file_path);
				FileReader fr = new FileReader(f.getAbsolutePath());
				BufferedReader br2 = new BufferedReader(fr);
				boolean endOfFile = false;
				
				int counter = 0; 
				while(endOfFile == false){
					String line = br2.readLine();
					fileSentences[counter] = line;
					if (line == null){
						endOfFile = true;
						lines = counter;
						break;
					}
					counter++;
				}		
				
				fileDoesntWork = false;
				makeReport(f);
			} 
			catch (FileNotFoundException fnfe) {
				System.out.println("File doesn't exist. \n");
				continue;
			} 
			catch (IOException ioe) {
				System.out.println("File contents are not readable.");
				continue;
			}
		}
		return;	
	}
}