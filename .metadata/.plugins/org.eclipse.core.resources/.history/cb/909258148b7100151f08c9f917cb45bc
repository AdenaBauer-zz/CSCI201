package game;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.net.MalformedURLException;

import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JTextArea;

import game.GameManager.TestBackgroundImage;

public class HelpMenu extends JFrame {
	
	private static final String BACKHGROUND_IMAGE_URL = "src/imgs/card_blue.png";
	Font font;
	JDialog dialog;
    public void initUI() throws MalformedURLException {
    	

		font = new Font("Calibri", Font.BOLD, 10);
	    try{
			font = Font.createFont(Font.TRUETYPE_FONT, new File("src/imgs/kenvector_future.ttf")).deriveFont(Font.PLAIN, 10);
		}
		catch(Exception e){
			System.out.print("font error thrown");
		}
    	
		dialog = new JDialog(this, TestBackgroundImage.class.getSimpleName());
        dialog.setModal(true);
        dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        dialog.setLocation(500, 500);
        this.setSize(850, 400);
        BufferedImage b = null;
        try{
        	b = ImageIO.read(new File("src/imgs/card_beigeLight.png"));
        }
        catch(Exception e){
        	System.out.println("backgroundimagefailure");
        }
        final ImageIcon backgroundImage = new ImageIcon(b);
        
        JPanel mainPanel = new JPanel(new BorderLayout()) {
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                g.drawImage(backgroundImage.getImage(), 0, 0, getWidth(), getHeight(), this);
            }

            @Override
            public Dimension getPreferredSize() {
                Dimension size = super.getPreferredSize();
                size.width = Math.max(backgroundImage.getIconWidth(), size.width);
                size.height = Math.max(backgroundImage.getIconHeight(), size.height);

                return size;
            }
        };
        mainPanel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));

        JTextArea l = new JTextArea("Help Info\n\n"
        		+ "Each player chooses four pawns of one color and one player is selected to play first. \n"
        		+ "Each player in turn draws one card from the stack and follows its instructions.\n "
        		+ "To begin the game, all of a player's four pawns are restricted to Start; only a 1 or 2 card can release them to the rest of the board. \n"
        		+ "Playing a 1 or a 2 places a pawn on the space directly outside of start; playing a 2 does not entitle the pawn to a second space.\n"
        		+ "A player can jump over any other pawn, landing on the square indicated by the card. \n"
        		+ "However, two pawns cannot occupy the same square. A pawn that lands on a square occupied by another 'bumps' that pawn back to its own Start. Players can not bump their own pawns back to Start.\n "
        		+ "If the only way to complete a move would result in a player bumping himself, the pawns remain in place and the player loses his or her turn.\n"
        		+ "If a pawn lands at the start of a slide (except those of its own colour) by direct movement or as the result of a switch with the 11 card or a Sorry card, it immediately moves to the last square of the slide. \n"
        		+ "All pawns anywhere on the slide are sent back to their respective Starts.[4]The last five squares before home are the 'safety zone.'\n "
        		+ "Access is limited to those pawns of the same color. Pawns inside the zone are immune to being replaced by an opponent's pawn with an 11 or a Sorry! card. \n"
        		+ "However, a pawn is vulnerable to being forcibly moved backward out of the safety zone. "
        		+ "Forced backward moves can cause a pawn to exit the zone.\n "
        		+ "Also, you cannot move your pawn backwards and forwards and count it as a space, no matter what card you have, it is not allowed to move backwards and forwards.\n"
        		);
        l.setEditable(false);
        l.setFont(font);
        l.setOpaque(false);
        l.setLineWrap(true);
        l.setAlignmentY(CENTER_ALIGNMENT);
        l.setAlignmentX(CENTER_ALIGNMENT);
        mainPanel.add(l, BorderLayout.CENTER);
        JButton j = new JButton("ok");
        j.setFont(font);
        j.setSize(100, 50);
        j.addActionListener(new ActionListener(){
        	public void actionPerformed(ActionEvent e)
        	{
        		setVisible(false); //you can't see me!
        		dispose();
        	}
        });
        mainPanel.add(j, BorderLayout.SOUTH);
        dialog.add(mainPanel);
        dialog.setSize(850, 400);
    }
    
    public void showMe(){
        dialog.setVisible(true);

    }
    
}
